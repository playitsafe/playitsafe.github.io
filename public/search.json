[{"title":"Deploy A Static Website via AWS S3, CloudFront and More","url":"/2022/06/04/Deploy-A-Website-via-AWS-S3-CloudFront-and-More/","content":"There are many different ways to deploy a website online. A dedicated server with Nginx or Apache, Github Pages and cloud service such as AWS or GCP can all do the trick. However, for a static website, a dedicated server might be a bit overkill as cloud service provides us a cheap, easy and sustainable way to deploy a static website. In this post, I will deploy a commercial website on AWS S3 bucket.\nPrerequisite\nA domain name purchased from domain provider such as Godaddy or AWS Route53.\nA built static website.\n\nArchitectureThe overview of the project architecture will be like this:\n\nCreate an S3 bucketCreate an S3 bucket on AWS and de-select Block Public Access settings to make it accessible by the public.\nAnd then, upload website resources to S3 bucket. Make sure an entry html is included.\nAlso, we’ll need to create a bucket policy to allow PublicReadGetObject permission. Under the permission tab of the bucket, edit bucket policy to add this rule:\n&#123;\n    &quot;Version&quot;: &quot;2012-10-17&quot;,\n    &quot;Statement&quot;: [\n        &#123;\n            &quot;Sid&quot;: &quot;PublicReadGetObject&quot;,\n            &quot;Effect&quot;: &quot;Allow&quot;,\n            &quot;Principal&quot;: &quot;*&quot;,\n            &quot;Action&quot;: &quot;s3:GetObject&quot;,\n            &quot;Resource&quot;: &quot;arn:aws:s3:::myexample.com/*&quot;\n        &#125;\n    ]\n&#125;\n\nRequest an SSL certificate from Amazon Certificate Manager(ACM):To use an ACM certificate with Amazon CloudFront, you must request or import the certificate in the US East (N. Virginia) region.\n\nYou will have CNAME key-value pairs generated for you to verify your domain. If you are using Route53 as a domain provider, simply click Create records in Route53. If you are using other providers such as godaddy, you will need to create these CNAME records so it can be verified.\nCreate a CloudFront distribution\nSelect the bucket for the Origin Domain. If your entry file is in a subfolder, you’ll need to put it in the Origin Path field.\n\nUnder the view settings, you you’d only allow https requests, you can select the Redirect HTTP to HTTPS option.\n\nAdd your domain name as alias in the Alternate domain name field.\n\nSelect the SSL certificate we just requested in the Custom SSL certificate field.\n\nPut your default entry file(ex. index.html) in the Default root object field.\n\n\nOnce the distribution is created and enabled, click into the distribution from console and you’ll get the distribution domain name. You can configure your DNS using this domain name in Route53 or Godaddy.\nI’m using Godaddy so it would be like this:\nRedirect domainIf you want to redirect myexample.com to www.myexample.com which is just configured with CloudFront distribution domain, in Godaddy, you can create a Forwarding rule:\n\nInvalidate CloudFront cacheUnder Invalidation tab, click Create Invalidation and add object path into it:\nSummarizeThis basic deployment with AWS stack includes AWS S3, CloudFront and ACM to enable SSL encryption. What is worth noticing is the S3 bucket policy definition and the region of ACM certificate should be requested in N. Virginia to make it work with CloudFront.\nWhat’s Next?After we deploy the website online, we need to make it visible in search engines which is out of this post’s scope. I’ll be having another post relevant to that in the feature.\nReferencehttps://docs.aws.amazon.com/acm/latest/userguide/acm-regions.html\nhttps://dale-bingham-soteriasoftware.medium.com/creating-a-static-website-using-godaddy-github-aws-s3-codedeploy-and-aws-cloudfront-1990a8f4ddd8\nhttps://tecadmin.net/remove-cloudfront-cache/\n","categories":["DevOps"],"tags":["AWS","S3","CloudFront","ACM"]},{"title":"Draw a triangle caret with pure CSS","url":"/2022/05/02/Draw-a-triangle-caret-with-pure-css/","content":"Prefix\nIt is very common that we need a triangle caret on a web page to display as an arrow or other similar symbols. It can be achieved by using a png or svg file, or importing from third-party icon library such as Font Awesome\n\nHowever, a more efficient low-carbon way is to draw it using CSS border attribute.\nA normal border\nThe most common use case of a border would be this:\n&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;\n\n&lt;style&gt;\n  .box &#123;\n    height: 100px;\n    width: 100px;\n    border: 5px solid #000;\n  &#125;\n&lt;/style&gt;\n\n\nIf we take a look at the border shape by giving a wider width of it, we will see it looks like this:\n&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;\n\n&lt;style&gt;\n  .box &#123;\n    width: 200px;\n    height: 200px;\n    border-color: red blue yellow green;\n    border-style: solid;\n    border-width: 50px 50px 50px 50px;\n  &#125;\n&lt;/style&gt;\n\n\nBorder with zero height and width\nInstead of giving height and width to the box, when we set the width and height of the outer box to 0, the width of the border will stretch out the outer box, four sides of the borders will collapse together and each side of the border will be a triangle of 100px wide and 50px height, just like this:\n&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;\n\n&lt;style&gt;\n  .box &#123;\n    width: 0;\n    height: 0;\n    border-color: red blue yellow green;\n    border-style: solid;\n    border-width: 50px 50px 50px 50px;\n  &#125;\n&lt;/style&gt;\n\n\nDisplay as a triangle\nNow what we need to do is to hide three other sides of the border and only show one of it:\n&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;\n\n&lt;style&gt;\n  .box &#123;\n    width: 0;\n    height: 0;\n    border-color: red transparent transparent transparent;\n    border-style: solid;\n    border-width: 50px 50px 50px 50px;\n  &#125;\n&lt;/style&gt;\n\n\n#Other casesIf we try to set one side of the border width to be zero, we’ll get and rectangle with three triangles:\n&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;\n\n&lt;style&gt;\n  .box &#123;\n    width: 0;\n    height: 0;\n    border-color: red blue yellow green;\n    border-style: solid;\n    border-width: 50px 50px 0 50px;\n  &#125;\n&lt;/style&gt;\n\n\nUse casesThis can be useful if we need a ribbon icon on page just like this:\n\nThe solution is to draw a rectangle on top and add a sudo class :after below it to implement 3 sides of the border:\n&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;\n\n&lt;style&gt;\n  .box &#123;\n    width: 50px;\n    height: 70px;\n    background: red;\n    position: relative;\n  &#125;\n\n  .box:after &#123;\n    position: absolute;\n    left: 0;\n    top: 70px;\n    content: &#39;&#39;;\n    border-width: 12px 25px;\n    border-style: solid;\n    border-color: green green transparent green;\n  &#125;\n&lt;/style&gt;\n\n\nAnd we just need to set the color all red, and maybe add some text to make it a perfect ribbon.\n\n","categories":["Front-end"],"tags":["CSS","Web"]},{"title":"Implement a countdown timer in React Hooks","url":"/2022/04/02/Implement-a-countdown-timer-in-React-Hooks/","content":"Prefix\nFrom time to time we will see timers in the world of frontend, of which the use cases could be a count-down function, or a disabled button which will be released active after a certain amount of time to force users to read through site T&amp;C, or a button to send mobile code which is restricted to be clickable within a time interval after last click. Many front-end frameworks have already provided an out-of-box component of that such as ProFormCaptcha which to support common CAPTCHA functionality in the middle and backend.\nHowever, we will run into some cases that we need to customize the function as we wish and the provided function from the framework may have limitations. In this case we will need to implement this function by ourself.\nRequirements Analysis\nIdeally, we need to implement a button that behaves like this:\n\nFirst sms will be sent at the time the modal pops up, and the button start to count down util it reaches the time interval.\nAfter each count down, the button will be clickable and will start counting down after each click.\n\n\nImplementation in a React componentBasic setup:\nFrom the perspective of code, will need two states to manage this timer:\n\nA state to record the status of the button(disabled or active).\nA state to record time left after each seconds\n\nSo the basic code structure looks like this:\nimport React, &#123; useEffect, useState &#125; from &#39;react&#39;;\nimport &#123; Input, Button &#125; from &#39;@/my/components&#39;;\n\nconst TIME_INTERVAL = 59;\n\nexport default const TimerModal = () =&gt; &#123;\n    const [seconds, setSeconds] = useState&lt;number&gt;(TIME_INTERVAL);\n    const [isCounting, setIsCounting] = useState&lt;boolean&gt;(false);\n\n    const clickHandler = () =&gt; &#123;\n        sendCode();\n        // reset timer\n    &#125;\n    \n    return (\n        &lt;Input /&gt;\n        &lt;Button onClick=&#123;clickHandler&#125; disabled=&#123;isCounting&#125; /&gt;\n    );\n&#125;\n\nAdd timer logicFrom the requirement above we would know that the TimerModal will pop up and a first SMS has already been sent and the Timer button is disabled and start to count down. In this situation useEffect hook will be a perfect function to host the timer logic.\nuseEffect() dependency listTo listen to the change of the timer button and ensure timer works as we expected, we need to put two of the states(seconds and isCounting) to the dependency list of useEffect. \nInside of the timer logicWe achieve the expected result by updating the seconds(minus 1 in each call) inside a setInterval function. The initial seconds right after the Timer component is mounted is 59s, in the meanwhile, setInterval function inside useEffect hook will update seconds by deducting 1, and this will also trigger useEffect hook again and clear previous setInterval function and start a new session of setInterval() to minus seconds by 1 util it counts down to 1 second, which means the setInterval function is cleared and the countdown session status is reset to inactive(to set isCounting to false and seconds set to initial time interval) and the button will be clickable.\nAfter the button is clicked, the timer will be reset and a new cycle of the useEffect hook will start again.\nimport React, &#123; useEffect, useState &#125; from &#39;react&#39;;\nimport &#123; Input, Button &#125; from &#39;@/my/components&#39;;\n\nconst TIME_INTERVAL = 59;\n\nexport default const TimerModal = () =&gt; &#123;\n    const [seconds, setSeconds] = useState&lt;number&gt;(TIME_INTERVAL);\n    const [isCounting, setIsCounting] = useState&lt;boolean&gt;(true);\n\n    const resetTimer = () =&gt; &#123;\n        setSeconds(TIME_INTERVAL);\n        setIsCounting(true);\n    &#125;\n\n    useEffect((): () =&gt; void =&gt; &#123;\n        //setInterval Type would be number if uses window.setInterval()\n        let interval: null | NodeJS.Timer = null;\n        if (isCounting) &#123;\n            interval = setInterval(() =&gt; &#123;\n                setSeconds(seconds =&gt; &#123;\n                    if (seconds &gt; 1) &#123;\n                        return seconds - 1;\n                    &#125; else &#123;\n                        interval &amp;&amp; clearInterval(interval);\n                        setIsCounting(false);\n                        return TIME_INTERVAL;\n                    &#125;\n                &#125; );\n            &#125;, 1000);\n        &#125; else &#123;\n            interval &amp;&amp; clearInterval(interval);\n        &#125;\n    &#125;, [ isCounting, seconds ])\n\n    const clickHandler = () =&gt; &#123;\n        sendCode();\n        resetTimer();\n    &#125;\n\n    return (\n        &lt;Input /&gt;\n        &lt;Button onClick=&#123;clickHandler&#125; disabled=&#123;isCounting&#125; /&gt;\n    );\n&#125;\n\nReviewThe implementation above seems to perfectly fit the use case, one problem still hides under the hood and will cause memory leakage. If you are on the halfway during countdown session and the Timer component is unmounted(since it’s a modal and will be unmounted after it’s closed), the setInterval function is still there in the background. Luckily, the useEffect hook provides a return callback function to allow us unsubscribe any side effects outside of the React lifecycle, which will be called before the component is unmounted.In this case, we need to return a housekeeping function at the end of the useEffect callback function to clear the setInterval function. So the final code looks like this:\nimport React, &#123; useEffect, useState &#125; from &#39;react&#39;;\nimport &#123; Input, Button &#125; from &#39;@/my/components&#39;;\n\nconst TIME_INTERVAL = 59;\n\nexport default const TimerModal = () =&gt; &#123;\n    const [seconds, setSeconds] = useState&lt;number&gt;(TIME_INTERVAL);\n    const [isCounting, setIsCounting] = useState&lt;boolean&gt;(false);\n\n    const resetTimer = () =&gt; &#123;\n        setSeconds(TIME_INTERVAL);\n        setIsCounting(true);\n    &#125;\n\n    useEffect((): () =&gt; void =&gt; &#123;\n        //setInterval Type would be number if uses window.setInterval()\n        let interval: null | NodeJS.Timer = null;\n        if (isCounting) &#123;\n            interval = setInterval(() =&gt; &#123;\n                setSeconds(seconds =&gt; &#123;\n                    if (seconds &gt; 1) &#123;\n                        return seconds - 1;\n                    &#125; else &#123;\n                        interval &amp;&amp; clearInterval(interval);\n                        setIsCounting(false);\n                        return TIME_INTERVAL;\n                    &#125;\n                &#125; );\n            &#125;, 1000);\n        &#125; else &#123;\n            interval &amp;&amp; clearInterval(interval);\n        &#125;\n        // unsubscription\n        return () =&gt; interval &amp;&amp; clearInterval(interval);\n    &#125;, [ isCounting, seconds ])\n\n    const clickHandler = () =&gt; &#123;\n        sendCode();\n        resetTimer();\n    &#125;\n\n    return (\n        &lt;Input /&gt;\n        &lt;Button onClick=&#123;clickHandler&#125; disabled=&#123;isCounting&#125; /&gt;\n    );\n&#125;\n\nAnother takeaway from this case is that when we update the state which depends on the previous state, we can use a callback function inside useState() hook.the setState() function provided by useState hook accepts either a new state value or a callback function as an updater which returns a new state to set state based on the previous state.\nconst App = () =&gt; &#123;\n  const [num, setNum] = useState(0); // same API as useState\n\n  const handleClick = () =&gt; &#123;\n    setNum(prevState =&gt; prevState + 1);\n  &#125;;\n  return &lt;button onClick=&#123;handleClick&#125;&gt;Increment&lt;/button&gt;;\n&#125;\n\nSummaryThis is a use case that I encountered during development and I think this would be a perfect example to learn and demonstrate the concept of useEffect and useState hooks in React.js. When functional component started to take over class-based component, I firstly use the useEffect hook the way that I use componentDidMount(), componentDidUpdate() and componentDidUnmount() function. After a while, I started to learn that they may share most of the use cases, but the conception is different and useEffect hooks tends to be a much cleaner way to implement and manage a single logic at one place instead of having to use multiple lifecycle functions to trigger&#x2F;subscribe&#x2F;unsubscribe side effects.\nReferencesReact docs: https://reactjs.org/docs/hooks-effect.html\n","categories":["Backend"],"tags":["Web","Hooks","React"]},{"title":"About Me","url":"/2022/03/12/hello-world/","content":"Welcome to my dev journal! This is your very first post. I’ll be sharing more posts regarding web development on this site in the near future.\nTo know more about me please see here\n"}]